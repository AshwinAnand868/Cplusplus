Name: Ashwin Anand
Email: aanand24@myseneca.ca
Student ID: 152042206
Data: 21 November 2021
Section: OOP244NCC

											Reflection
In this workshop, I learned two very interesting and important topics. First one is Virtual Funtions which implements polimorphism and in specific, inclusion polymorphism and second is Abstract classes which are called so because they contains at least one pure virtual funtions in their definition. These classes are not instantiable means I cannot create their objects, however other concrete classes which inherit these abstract classes are responsible for the implementation of the virtual functions those classes contains. Essentially, child class should implement the virtual functions of the base abstract class, otherwise child class will also be considered as abstract class. In polymorphism, I learned two ways of function binding which are early binding and dynamic dispatch. Early binding are based on object's static type and dynamic dispatch is based on object's dynamic type. However, what this static type means? Actually, during compilation compiler determines the type of the polymorhic or class object and this type is called static type. For example, I have a person reference which is initialized with student object and I am calling a method (overridden) which is implemented in both the person and student, then at the runtime the method of person type will run on student object not student type because during compilation static type(determined by compiler) of the student object will be person only, not student. Oppositely, if I want that the student method will only run on student object even the type is parent, then I can go for dynamic dispatch. In dynamic dispatching, we can make the overridden method in the parent class (person here) as virtual and this virtual keyword will run the most recent version of the specified called method. The most recent version would obviously be of derived class function. Another important thing I learned was declaring a destructor as virtual which makes sure that all the dynamic deallocation does not do any memory or segmentation faults. Now, in abstract classes, I learned the declaration of virtual function which is basecally declaring the function with virtual keyword and then assign zero to that declaration of the function. Then, if I make all the methods of the class as pure virtual and also if that class doesn't contain any data member, then that class is considered as interface in object oriented terminology. Another general knowledge, I got was making a small unit test for all the modules to check their workings. Overall, this workshop like all others, was very helpful in giving me a small hands on training on main topics.