/*
Name - Ashwin Anand
Seneca email - aanand24@myseneca.ca
Student id -152042206
Date of creation - 18 October 2021
*/
                                                                 Reflection Answer
In this workshop, I learned about various interesting things which make my code to work in the way I want. First of all, I learned about overloading operators with the help of C++ language which is a very unique thing to do in a program in my perspective. I can overload various operators like binary, assignment, relational, inserction and extraction and various others like unary operators. I can make them to behave very independetly from the regular fundamental types.  For example, i can add two differences named A and B classes together as A + B, but internally I can overload the addition operator so that it will operate on a number type only. Not only that, we can also overload the operator for example int, bool or double to make a class behave exactly like integer, double or boolean. However, here addition operator may behave as a helper operator. Now, here i understood about member operators which are declared in the class structure or defintion and helper operators which are used in our code logic to support classes and which usually calls the member functions of the respective class. I also learned how to differentiate in the overloading of prefix and postfix operator. Postfix operator includes int as a parameter while prefix does not. Apart from this, I learend about class bloating in which when we add data member to a class, we also need a public query for that member value. As the member class defintion grows, it is called class bloat. We can reduce this class bloating by using friendship (friend keywork. We can declare a helper function to be friend of other function. By doing this, we grant that function to access the private member variable of the class and can even change its value. There are also other additional things I learned like we cannot like intialization of object using constructors and setting to safe empty state when necessary.