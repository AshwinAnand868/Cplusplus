/*
Name: Ashwin Anand
Email: aanand24@myseneca.ca
Student ID: 152042206
Data: 14 November 2021
Section: OOP244NCC

I have done all the coding by myself and only copied the code that my professor provided to complete my workshops and assignments.
*/
										Reflection
In this workshop, I learned about the concept of the inheritance in classes. In the object oriented programming, one class can inherit the properties of the other class. Here, the class which is inheriting is the called as Derived class and the class from which it is inheriting is called as Base class. It all depends on the relationship between the classes. For example, if I have a class Vehicle and another class called Car, then I know that there will be some common functions like horn, brakes, tyres and many others between car and vehicle. What i can do is to define those functions in the vehicle class so that even other vehicles like trucks, bus can inherit those function rather than implementing their logic every time. By doing this I can reuse the logic of one class that is parent class and this reusablitiy is what inheritance is. I also learned about access modifiers which can be public (in which child class can access all member functions), protected (in which limits access to derived classes only) and private(in which child class does not have access to any of the member of the parent class). Another thing I learned was Deriving functions. In the concept of the inheritance, child class can access the normal member functions of the base class but does not by default inherit the special member functions like constructors, destructors and copy assignment operator, however child class' constructor, destructor and and copy assignment operator always calls the parent class constructor, destructor and copy assignment operators respectively upon execution. I also learned about shadowing in which child class shadows the function of the base class with the same identifier. Another interesting thing I learned is the execution of child class constructor and destructor. Child class constructor first allocates memory for instance variables of the base class constructor and then exeuctes the logic of that. After that, it allocates memory for the instance variables in itself and then execute its logic in the constructor. On the other hand, destructor procedure is opposite. Child class destructor gets executed first and de-allocation of child class memory takes place before call to the Base class destructor in which after executing the logic, de-allocation of the base class memory takes place. Moreover, in notes I also learned about how to override helper input and output operators for both the child class and base class and then call those helper functions in the main method. All in All, the things I learned in this workshop was very interesting to me as it relates my programming to real world applications. 