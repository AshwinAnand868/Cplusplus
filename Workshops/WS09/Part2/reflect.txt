Name - Ashwin Anand
Seneca email - aanand24@myseneca.ca
Student id -152042206
Date of creation - 27 November 2021



                                       	       		                Reflection 

This workshop was about derived classes and resources that is or may be, how the resource pointer is managed(created and initialized) with in different levels of inheritance hierarchy. In this workhop, I learned what at one time I was not able to understand. Actually, while doing this workhop i encountered a problem in which I was not able to shallow and deep copy the data of the parent class but the child class data was getting properly copied and as a result when I print the object it gave me error because the parent class object's data which was not supposed to be null while printing was actually null, however as I mentioned that child object's data was gotten copied so it did not cause any problem. I was first confused and did not understand what is happening to the data of the parent class. Then i debug my program and after some tries, I got to know that when I was calling the child class copy assignment operator, it was not calling the base class copy assignment operator but just initializing its own object's state. So, after getting this I immediately wrote the code to call the parent class assignment operator so that parent's object data can also get initialized when I was doing assignment of the derived class object. The real problem behind unknowing this fact is that,while I started this workshop, I did not read notes which I usually did in all of my workshops. Then when i read the notes, I fully understood the concept. The thing is if we customize the logic of the copy constructor or the copy assignment operator or if we have resource pointers with in every class of the inheritance hierarchy given to us, then the derived class should explicitly call the copy assignment operator or constructor of its parent. Otherwise, the default constructor of the parent class will be called from the copy constructor of the child class and from the copy assignment operator of the child class, there would not be any call to the base class copy assignment operator and therefore, the data of the parent class object will always be at its default state. The conclusion from this can be that our logic should call explicitly the base class copy assignment operator and constructor so that the parent class object can take care(create and initialize) of its object state by itself. This point seems very valuable to me in improving my coding.
